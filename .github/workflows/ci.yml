name: CI

on:
  push:
    branches: [master]
  pull_request:

env:
  UNITTEST_SHUFFLE: 1
  UNITTEST_RANDOM_SEED: random
  UNITTEST_THREADS: 1
  UNITTEST_XML: 1
  UNITTEST_PROGRESS: 1

jobs:
  Sanitizer:
    strategy:
      matrix:
        buildType: [Debug, Release]
        os: [Ubuntu, macOS]
        sanitizer: [address, thread]
    runs-on: ${{matrix.os}}-latest

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Set up Clang 9
      if: runner.os == 'Linux'
      run: |
        sudo update-alternatives --install /usr/bin/cc cc /usr/bin/clang-9 100
        sudo update-alternatives --install /usr/bin/c++ c++ /usr/bin/clang++-9 100

    - name: Install dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get install -y \
            libprocps-dev

    - name: Create build folder
      run: mkdir build

    - name: Build
      working-directory: ./build
      run: |
        cmake .. -DCMAKE_BUILD_TYPE=${{matrix.buildType}} -DREALM_MAX_BPNODE_SIZE=1000 \
                 -DREALM_ASAN=${{matrix.sanitizer == 'address'}} \
                 -DREALM_TSAN=${{matrix.sanitizer == 'thread'}} \
                 -DREALM_USAN=${{matrix.sanitizer == 'undefined'}} \
                 -DREALM_MSAN=${{matrix.sanitizer == 'memory'}} \
                 -DREALM_SKIP_SHARED_LIB=ON
        cmake --build . --parallel --config ${{matrix.buildType}}
    
    - name: Test
      working-directory: ./build/test
      run: ./realm-tests

  Linux:
    strategy:
      matrix:
        buildType: [Debug, Release]
        compiler: [gcc, clang]
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Set up Clang 9
      if: matrix.compiler == 'clang'
      run: |
        sudo update-alternatives --install /usr/bin/cc cc /usr/bin/clang-9 100
        sudo update-alternatives --install /usr/bin/c++ c++ /usr/bin/clang++-9 100

    - name: Install dependencies
      run: |
        sudo apt-get install -y \
            libprocps-dev

    - name: Create build folder
      run: mkdir build

    - name: Build
      working-directory: ./build
      run: |
        cmake .. -DCMAKE_BUILD_TYPE=${{matrix.buildType}}
        cmake --build . --parallel --config ${{matrix.buildType}}
    
    - name: Test
      working-directory: ./build/test
      run: ./realm-tests

  macOS:
    strategy:
      matrix:
        buildType: [Debug, Release]
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Create build folder
      run: mkdir build

    - name: Build
      working-directory: ./build
      run: |
        cmake .. -DCMAKE_TOOLCHAIN_FILE=../tools/cmake/macosx.toolchain.cmake \
                 -DCMAKE_BUILD_TYPE=${{matrix.buildType}}
        cmake --build . --config ${{matrix.buildType}} --parallel
    
    - name: Test
      working-directory: ./build/test
      run: ./realm-tests

  Windows:
    strategy:
      matrix:
        buildType: [Debug, Release]
        platform: [Win32, x64, ARM, ARM64]
        system:
          - { name: Windows, version: "8.1" }
          - { name: WindowsStore, version: "10.0" }
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Create build folder
      run: mkdir build

    - name: Build
      working-directory: ./build
      run: |
        cmake .. -A ${{matrix.platform}} `
                 -DCMAKE_BUILD_TYPE=${{matrix.buildType}} `
                 -DCMAKE_SYSTEM_NAME=${{matrix.system.name}} `
                 -DCMAKE_SYSTEM_VERSION="${{matrix.system.version}}"
        cmake --build . --config ${{matrix.buildType}}
    
    - name: Test
      if: matrix.system.name == 'Windows' && !startsWith(matrix.platform, 'ARM')
      working-directory: ./build/test/${{matrix.buildType}}
      run: .\realm-tests.exe

  Android:
    strategy:
      matrix:
        buildType: [Debug, Release]
        abi: [armeabi-v7a, x86, x86_64, arm64-v8a]
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Create build folder
      run: mkdir build

    - name: Build
      working-directory: ./build
      run: |
        cmake .. -D CMAKE_TOOLCHAIN_FILE="${ANDROID_NDK_HOME}/build/cmake/android.toolchain.cmake" \
                 -D CMAKE_INSTALL_PREFIX=install \
                 -D CMAKE_BUILD_TYPE="${{matrix.buildType}}" \
                 -D ANDROID_ABI="${{matrix.abi}}" \
                 -D REALM_ENABLE_ENCRYPTION=1 \
                 -D CPACK_SYSTEM_NAME="Android-${{matrix.abi}}"
        cmake --build . --config ${{matrix.buildType}} --parallel
    
    - name: Test
      uses: reactivecircus/android-emulator-runner@v2
      if: startsWith(matrix.abi, 'x86')
      with:
        arch: ${{matrix.abi}}
        api-level: 21
        script: |
          adb shell 'rm -f /data/local/tmp/unit-test-report.xml'
          adb push build/test/realm-tests /data/local/tmp
          find build/test -type f -name "*.json" -maxdepth 1 -exec adb push {} /data/local/tmp \;
          find build/test -type f -name "*.realm" -maxdepth 1 -exec adb push {} /data/local/tmp \;
          find build/test -type f -name "*.txt" -maxdepth 1 -exec adb push {} /data/local/tmp \;
          adb shell 'cd /data/local/tmp; UNITTEST_PROGRESS=1 GITHUB_ACTIONS=1 ./realm-tests'
          adb pull /data/local/tmp/unit-test-report.xml
